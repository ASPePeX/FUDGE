var TestDebug;
(function (TestDebug) {
    var ƒ = FudgeCore;
    let filters = new Map([
        [ƒ.DEBUG_FILTER.INFO, ƒ.Debug.info],
        [ƒ.DEBUG_FILTER.LOG, ƒ.Debug.log],
        [ƒ.DEBUG_FILTER.WARN, ƒ.Debug.warn],
        [ƒ.DEBUG_FILTER.ERROR, ƒ.Debug.error],
        [ƒ.DEBUG_FILTER.FUDGE, ƒ.Debug.fudge],
        [ƒ.DEBUG_FILTER.CLEAR, ƒ.Debug.clear],
        [ƒ.DEBUG_FILTER.GROUP, ƒ.Debug.group],
        [ƒ.DEBUG_FILTER.GROUPCOLLAPSED, ƒ.Debug.groupCollapsed],
        [ƒ.DEBUG_FILTER.GROUPEND, ƒ.Debug.groupEnd],
        [ƒ.DEBUG_FILTER.SOURCE, ƒ.Debug.source]
    ]);
    let targets = [ƒ.DebugConsole, ƒ.DebugTextArea, ƒ.DebugAlert];
    window.addEventListener("load", init);
    function init(_event) {
        let form = document.forms[0];
        form.appendChild(createTable());
        form.addEventListener("change", createMessage);
        ƒ.DebugTextArea.textArea = document.querySelector("textarea");
    }
    function createTable() {
        console.log(filters, targets);
        let table = document.createElement("table");
        table.addEventListener("click", hndClickCell);
        let row = document.createElement("tr");
        table.appendChild(row);
        row.appendChild(document.createElement("td"));
        for (let filter of filters) {
            let head = document.createElement("th");
            head.textContent = ƒ.DEBUG_FILTER[filter[0]];
            head.setAttribute("toggle", "false");
            head.setAttribute("name", filter[0].toString());
            head.addEventListener("click", toggleColumn);
            row.appendChild(head);
        }
        let countRow = 0;
        for (let target of targets) {
            row = document.createElement("tr");
            table.appendChild(row);
            let head = document.createElement("th");
            head.textContent = getTargetName(target);
            head.setAttribute("toggle", "false");
            head.addEventListener("click", toggleRow);
            row.appendChild(head);
            let countColumn = 0;
            for (let filter of filters) {
                let cell = document.createElement("td");
                cell.innerHTML = `<input name="${filter[0]}|${countRow}" type="checkbox"/>`;
                row.appendChild(cell);
                countColumn++;
            }
            countRow++;
        }
        row = document.createElement("tr");
        table.appendChild(row);
        row.appendChild(document.createElement("td"));
        for (let filter of filters) {
            let cell = document.createElement("td");
            let button = document.createElement("button");
            cell.appendChild(button);
            button.innerText = "Send";
            button.type = "button";
            button.addEventListener("click", sendMessage);
            button.setAttribute("filter", filter[0].toString());
            row.appendChild(cell);
        }
        return table;
    }
    function createMessage(_event) {
        let message = {};
        for (let index in targets) {
            let filterResult = ƒ.DEBUG_FILTER.NONE;
            let target = targets[index];
            message[getTargetName(target)] = [];
            for (let filter of filters) {
                let type = filter[0];
                let checkbox = document.forms[0].querySelector(`input[name="${type}|${index}"]`);
                // console.log(index, type, checkbox.checked);
                if (checkbox.checked) {
                    filterResult |= type;
                    message[getTargetName(target)].push(ƒ.DEBUG_FILTER[type]);
                }
            }
            ƒ.Debug.setFilter(target, filterResult);
        }
        document.querySelector("p#Message").textContent = JSON.stringify(message);
        return message;
    }
    function hndClickCell(_event) {
        let target = _event.target;
        if (target.tagName == "TD") {
            let checkbox = target.children[0];
            checkbox.checked = !checkbox.checked;
        }
        createMessage(null);
    }
    function sendMessage(_event) {
        let target = _event.target;
        let filter = target.getAttribute("filter");
        let debug = filters.get(parseInt(filter));
        // console.log(debug);
        let message = createMessage(null);
        debug(JSON.stringify(message), message);
    }
    function getTargetName(_target) {
        return Reflect.getOwnPropertyDescriptor(_target, "name").value;
    }
    function toggleRow(_event) {
        let target = _event.target;
        let boxes = target.parentElement.querySelectorAll("input");
        toggle(target, boxes);
    }
    function toggleColumn(_event) {
        let target = _event.target;
        let selector = `input[name^="${target.getAttribute("name")}|"]`;
        let boxes = document.forms[0].querySelectorAll(selector);
        toggle(target, boxes);
    }
    function toggle(_head, _boxes) {
        let toggle = _head.getAttribute("toggle") == "false";
        for (let box of _boxes)
            box.checked = toggle;
        _head.setAttribute("toggle", toggle.toString());
    }
})(TestDebug || (TestDebug = {}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVGVzdERlYnVnLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiVGVzdERlYnVnLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLElBQVUsU0FBUyxDQW1KbEI7QUFuSkQsV0FBVSxTQUFTO0lBQ2pCLElBQU8sQ0FBQyxHQUFHLFNBQVMsQ0FBQztJQUVyQixJQUFJLE9BQU8sR0FBa0MsSUFBSSxHQUFHLENBQUM7UUFDbkQsQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQztRQUNuQyxDQUFDLENBQUMsQ0FBQyxZQUFZLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDO1FBQ2pDLENBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUM7UUFDbkMsQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQztRQUNyQyxDQUFDLENBQUMsQ0FBQyxZQUFZLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDO1FBQ3JDLENBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUM7UUFDckMsQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQztRQUNyQyxDQUFDLENBQUMsQ0FBQyxZQUFZLENBQUMsY0FBYyxFQUFFLENBQUMsQ0FBQyxLQUFLLENBQUMsY0FBYyxDQUFDO1FBQ3ZELENBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUM7UUFDM0MsQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUMsS0FB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